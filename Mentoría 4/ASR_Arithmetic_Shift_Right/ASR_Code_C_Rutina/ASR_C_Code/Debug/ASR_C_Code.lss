
ASR_C_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000229  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <asr16>:
#include <avr/io.h>
#include <stdint.h>

//RUTINA ASR (Aithmetic Shift Right)
void asr16(int16_t *value, uint8_t n) {
  80:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < n; i++) {
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0c c0       	rjmp	.+24     	; 0x9e <asr16+0x1e>
		// Realizar desplazamiento aritmético
		// Convertimos el número en una variable temporal
		int16_t temp = *value;
  86:	20 81       	ld	r18, Z
  88:	31 81       	ldd	r19, Z+1	; 0x01

		// Desplazamiento aritmético: replicar el bit de signo
		*value = (temp >> 1) | (temp & 0x8000);
  8a:	a9 01       	movw	r20, r18
  8c:	55 95       	asr	r21
  8e:	47 95       	ror	r20
  90:	22 27       	eor	r18, r18
  92:	30 78       	andi	r19, 0x80	; 128
  94:	24 2b       	or	r18, r20
  96:	35 2b       	or	r19, r21
  98:	31 83       	std	Z+1, r19	; 0x01
  9a:	20 83       	st	Z, r18
#include <avr/io.h>
#include <stdint.h>

//RUTINA ASR (Aithmetic Shift Right)
void asr16(int16_t *value, uint8_t n) {
	for (uint8_t i = 0; i < n; i++) {
  9c:	9f 5f       	subi	r25, 0xFF	; 255
  9e:	96 17       	cp	r25, r22
  a0:	90 f3       	brcs	.-28     	; 0x86 <asr16+0x6>
		int16_t temp = *value;

		// Desplazamiento aritmético: replicar el bit de signo
		*value = (temp >> 1) | (temp & 0x8000);
	}
}
  a2:	08 95       	ret

000000a4 <main>:

int main(void) {
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	// Simulación del comportamiento del código ensamblador

	int16_t num = 0b0110000000010000;  // Equivale a R17:R16 = 0x60:0x10
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	90 e6       	ldi	r25, 0x60	; 96
  b2:	9a 83       	std	Y+2, r25	; 0x02
  b4:	89 83       	std	Y+1, r24	; 0x01
	uint8_t shifts = 2;

	asr16(&num, shifts);  // Desplazar 2 veces aritméticamente a la derecha
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 40 00 	call	0x80	; 0x80 <asr16>

	while (1) {
		// Aquí podrías observar el resultado con un depurador o exportarlo a un puerto
		// Por ejemplo, si quisieras ver el resultado en PORTD:
		PORTD = (uint8_t)(num & 0x00FF);  // byte bajo
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <main+0x1c>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
