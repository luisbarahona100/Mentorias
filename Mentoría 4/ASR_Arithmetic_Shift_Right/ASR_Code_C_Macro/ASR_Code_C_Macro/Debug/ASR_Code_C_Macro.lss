
ASR_Code_C_Macro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000209  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ASR16>:
#include <stdint.h>

// Macro para ASR de 8 bits
#define ASR8(x)  (x = (x >> 1) | (x & 0x80))

void ASR16(int16_t *value, uint8_t n) {
  80:	fc 01       	movw	r30, r24
	uint8_t *low = (uint8_t *)value;        // Byte bajo
	uint8_t *high = ((uint8_t *)value) + 1; // Byte alto

	while (n--) {
  82:	15 c0       	rjmp	.+42     	; 0xae <ASR16+0x2e>
		ASR8(*high);                        // ASR en el byte alto
  84:	21 81       	ldd	r18, Z+1	; 0x01
  86:	92 2f       	mov	r25, r18
  88:	96 95       	lsr	r25
  8a:	20 78       	andi	r18, 0x80	; 128
  8c:	92 2b       	or	r25, r18
  8e:	91 83       	std	Z+1, r25	; 0x01
		uint8_t carry = *high & 0x01;       // Bit menos significativo del alto
		*low = (*low >> 1) | (carry << 7);  // ROR: rotar derecha el byte bajo
  90:	20 81       	ld	r18, Z
  92:	49 2f       	mov	r20, r25
  94:	41 70       	andi	r20, 0x01	; 1
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	ca 01       	movw	r24, r20
  9a:	96 95       	lsr	r25
  9c:	98 2f       	mov	r25, r24
  9e:	88 27       	eor	r24, r24
  a0:	97 95       	ror	r25
  a2:	87 95       	ror	r24
  a4:	92 2f       	mov	r25, r18
  a6:	96 95       	lsr	r25
  a8:	89 2b       	or	r24, r25
  aa:	80 83       	st	Z, r24

void ASR16(int16_t *value, uint8_t n) {
	uint8_t *low = (uint8_t *)value;        // Byte bajo
	uint8_t *high = ((uint8_t *)value) + 1; // Byte alto

	while (n--) {
  ac:	63 2f       	mov	r22, r19
  ae:	3f ef       	ldi	r19, 0xFF	; 255
  b0:	36 0f       	add	r19, r22
  b2:	61 11       	cpse	r22, r1
  b4:	e7 cf       	rjmp	.-50     	; 0x84 <ASR16+0x4>
		ASR8(*high);                        // ASR en el byte alto
		uint8_t carry = *high & 0x01;       // Bit menos significativo del alto
		*low = (*low >> 1) | (carry << 7);  // ROR: rotar derecha el byte bajo
	}
}
  b6:	08 95       	ret

000000b8 <main>:

int main(void) {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	int16_t number = 0x6010;  // Número original
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	90 e6       	ldi	r25, 0x60	; 96
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t shifts = 2;       // Cantidad de desplazamientos

	ASR16(&number, shifts);   // Ejecutar desplazamiento aritmético 2 veces
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 40 00 	call	0x80	; 0x80 <ASR16>
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x1c>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
