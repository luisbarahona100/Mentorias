
ADC_Code_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a4  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e7  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
  aa:	ff 91       	pop	r31
  ac:	ef 91       	pop	r30
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_21>:
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <ADC_init>:
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	80 83       	st	Z, r24
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
 102:	80 81       	ld	r24, Z
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	83 60       	ori	r24, 0x03	; 3
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <TIMER0_init>:
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	84 bd       	out	0x24, r24	; 36
 11a:	95 e0       	ldi	r25, 0x05	; 5
 11c:	95 bd       	out	0x25, r25	; 37
 11e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 122:	16 bc       	out	0x26, r1	; 38
 124:	81 e6       	ldi	r24, 0x61	; 97
 126:	87 bd       	out	0x27, r24	; 39
 128:	08 95       	ret

0000012a <main>:
	PORTB ^= (1<<0);
	_delay_ms(2000);
}
int main() {
	// Configurar puertos
	DDRC &= ~(1<<0); // PC0 como input -> Potenciómetro
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<0); // PC0 sin pull up
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	88 b9       	out	0x08, r24	; 8
	
	DDRB |= (1<<0); // PB0 como output -> LED
 136:	84 b1       	in	r24, 0x04	; 4
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	84 b9       	out	0x04, r24	; 4

	// Inicializar ADC y TIMER0
	ADC_init();
 13c:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	TIMER0_init();
 140:	0e 94 8b 00 	call	0x116	; 0x116 <TIMER0_init>
	
	sei(); // Habilitar interrupciones globales
 144:	78 94       	sei
	
	while(1) {
		
		// Comparar el valor leído del ADC
		if (lectura >= 512) { // ¿lectura >= 4V? 819 corresponde a 4V (4/5 * 1024)
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	81 15       	cp	r24, r1
 150:	92 40       	sbci	r25, 0x02	; 2
 152:	20 f0       	brcs	.+8      	; 0x15c <main+0x32>
			PORTB |= (1<<0); // Encender LED
 154:	85 b1       	in	r24, 0x05	; 5
 156:	81 60       	ori	r24, 0x01	; 1
 158:	85 b9       	out	0x05, r24	; 5
 15a:	f5 cf       	rjmp	.-22     	; 0x146 <main+0x1c>
			} else {
			PORTB &= ~(1<<0); // Apagar LED
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	85 b9       	out	0x05, r24	; 5
 162:	f1 cf       	rjmp	.-30     	; 0x146 <main+0x1c>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
